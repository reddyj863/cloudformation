
AWSTemplateFormatVersion: '2010-09-09'
Description: This stack deploys a devops stack

Mappings:
  CIDR:
    VPC: "10.0.0.0/16"
    publicSubnet: "10.0.0.0/23"
    privateSubnet: "10.0.2.0/23"
    internet: "0.0.0.0/0"
      
Resources:

 VPC:
   Type: AWS::EC2::VPC
   Properties:
     CidrBlock: !FindInMap ['CIDR', 'VPC']
     EnableDnsSupport: true
     Tags:
       - Key: vpc_name
         Value: my_vpc 
 publicSubnet:
     Type: AWS::EC2::Subnet
     Properties:
       VpcId: !Ref 'VPC'
       CidrBlock: !FindInMap ['CIDR', 'publicSubnet']
       MapPublicIpOnLaunch: true
       Tags:
         - Key: subnetName
           Value: public 
 privateSubnet:
     Type: AWS::EC2::Subnet
     Properties:
       VpcId: !Ref 'VPC'
       CidrBlock: !FindInMap ['CIDR', 'privateSubnet']
       Tags:
         - Key: subnetName
           Value: private 
 
 InternetGateway:
     Type: AWS::EC2::InternetGateway
 GatewayAttachement:
     Type: AWS::EC2::VPCGatewayAttachment
     Properties:
       VpcId: !Ref 'VPC'
       InternetGatewayId: !Ref 'InternetGateway'
 PublicRouteTable:
     Type: AWS::EC2::RouteTable
     Properties:
       VpcId: !Ref 'VPC'
 PublicRoute:
     Type: AWS::EC2::Route
     DependsOn: GatewayAttachement
     Properties:
       RouteTableId: !Ref 'PublicRouteTable'
       DestinationCidrBlock: '0.0.0.0/0'
       GatewayId: !Ref 'InternetGateway'
 PublicSubnetRouteTableAssociation:
     Type: AWS::EC2::SubnetRouteTableAssociation
     Properties:
       SubnetId: !Ref PublicSubnet
       RouteTableId: !Ref PublicRouteTable
 
 
   # Setup networking resources for the private subnets. Containers
   # in these subnets have only private IP addresses, and must use a NAT
   # gateway to talk to the internet. 
 NatGatewayOneAttachment:
     Type: AWS::EC2::EIP
     DependsOn: GatewayAttachement
     Properties:
         Domain: vpc
 NatGatewayTwoAttachment:
     Type: AWS::EC2::EIP
     DependsOn: GatewayAttachement
     Properties:
         Domain: vpc
 NatGatewayOne:
     Type: AWS::EC2::NatGateway
     Properties:
       AllocationId: !GetAtt NatGatewayOneAttachment.AllocationId
       SubnetId: !Ref privateSubnet
   
 PrivateRouteTableOne:
     Type: AWS::EC2::RouteTable
     Properties:
       VpcId: !Ref 'VPC'
 PrivateRouteOne:
     Type: AWS::EC2::Route
     Properties:
       RouteTableId: !Ref PrivateRouteTableOne
       DestinationCidrBlock: 0.0.0.0/0
       NatGatewayId: !Ref NatGatewayOne
 PrivateRouteTableOneAssociation:
     Type: AWS::EC2::SubnetRouteTableAssociation
     Properties:
       RouteTableId: !Ref PrivateRouteTableOne
       SubnetId: !Ref PrivateSubnet
       
 JenkinsSecurityGroupPublic:
  Type: AWS::EC2::SecurityGroup
  Properties:
    GroupDescription: Allow 8080 traffic from public  
    VpcId:
      Ref: 'VPC'
    SecurityGroupIngress:
    - IpProtocol: tcp
      FromPort: 0
      ToPort: 8080
      CidrIp: !FindInMap ['CIDR', 'internet']
    SecurityGroupEgress:
    - IpProtocol: tcp
      FromPort: 0
      ToPort: 0
      CidrIp: 0.0.0.0/0
 BastonHostSecurityGroupPublic:
  Type: AWS::EC2::SecurityGroup
  Properties:
    GroupDescription: Allow 22 traffic from public  
    VpcId:
      Ref: 'VPC'
    SecurityGroupIngress:
    - IpProtocol: tcp
      FromPort: 0
      ToPort: 22
      CidrIp: !FindInMap ['CIDR', 'internet']
    SecurityGroupEgress:
    - IpProtocol: tcp
      FromPort: 0
      ToPort: 0
      CidrIp: 0.0.0.0/0
   
  BastonHost:
   Type: AWS::EC2::Instance
   Properties:
     KeyName: "A different key here"
     DisableApiTermination: true
     ImageId:   
     InstanceType: "t2.medium"
     Monitoring: false
     SecurityGroupIds:
       - !Ref BastonHostSecurityGroupPublic
     Tags:
       - Key: Name 
         Value: BastonHost
       - Key: Environment
         Value: production
     SubnetId: !Ref publicSubnet  
     
  jenkins:
   Type: AWS::EC2::Instance
   Properties:
     KeyName: "siamol"
     DisableApiTermination: true
     ImageId:   
     InstanceType: "t2.medium"
     Monitoring: false
     SecurityGroupIds:
       - !Ref JenkinsSecurityGroupPublic
     Userdata: !Base64 |
       #!/bin/bash -ex
       # put your script here
     Tags:
       - Key: Name 
         Value: Jenkins
       - Key: Environment
         Value: production
     SubnetId: !Ref publicSubnet    
     
  redshift:
   Type: "AWS::Redshift::Cluster"
   Properties: 
         AutomatedSnapshotRetentionPeriod: Integer
         AvailabilityZone: String
         ClusterIdentifier: String
         ClusterParameterGroupName: String
         ClusterSecurityGroups: 
           - String
         ClusterSubnetGroupName: String
         ClusterType: String
         ClusterVersion: String
         DBName: String
         ElasticIp: String
         Encrypted: Boolean
         HsmClientCertificateIdentifier: String
         HsmConfigurationIdentifier: String
         IamRoles: 
           - String
         KmsKeyId: String
         LoggingProperties: 
            LoggingProperties
         MasterUsername: String
         MasterUserPassword: String
         NodeType: String
         NumberOfNodes: Integer
         OwnerAccount: String
         Port: Integer
         PreferredMaintenanceWindow: String
         PubliclyAccessible: Boolean
         SnapshotClusterIdentifier: String
         SnapshotIdentifier: String
         VpcSecurityGroupIds:
           - String
  EMRCluster: 
   Type: AWS::EMR::Cluster
   Properties: 
    Instances: 
      MasterInstanceGroup: 
        InstanceCount: 1
        InstanceType: "m3.xlarge"
        Market: "ON_DEMAND"
        Name: "Master"
      CoreInstanceGroup: 
        InstanceCount: 2
        InstanceType: "m3.xlarge"
        Market: "ON_DEMAND"
        Name: "Core"
      TerminationProtected: true
    Name: "EMR_CLUSTER"
    JobFlowRole: "EMR_EC2_DefaultRole"
    ServiceRole: "EMR_DefaultRole"
    ReleaseLabel: "emr-4.2.0"
    Tags: 
      - 
        Key: "Environment"
        Value: "production"
 
  AthenaNamedQuery:
    Type: AWS::Athena::NamedQuery
    Properties:
      Database: "DB Name here"
      Description: "A query that selects all aggregated data"
      Name: "MostExpensiveWorkflow"
      QueryString: >
                    SELECT workflowname, AVG(activitytaskstarted) AS AverageWorkflow
                    FROM swfmetadata
                    WHERE year='17' AND GROUP BY workflowname
                    ORDER BY AverageWorkflow DESC LIMIT 10
       
